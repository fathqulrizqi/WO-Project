<!doctype html>
@{
    ViewBag.Title = "Detail Return";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var currUser = ViewBag.CurrUser;
}

<!-- Canonical SEO -->
@*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css">*@
<link href="https://unpkg.com/bootstrap-table@1.21.0/dist/bootstrap-table.min.css" rel="stylesheet">

<!--   Fonts and icons   -->
@*<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
    <link href="http://fonts.googleapis.com/css?family=Roboto:400,700,300" rel="stylesheet" type="text/css">*@

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"></script>*@
<script src="https://unpkg.com/bootstrap-table@1.21.0/dist/bootstrap-table.min.js"></script>
@*<script src="https://unpkg.com/bootstrap-table@1.21.0/dist/extensions/toolbar/bootstrap-table-toolbar.min.js"></script>*@
@*<script src="https://cdn.jsdelivr.net/npm/tableexport.jquery.plugin@1.10.21/tableExport.min.js"></script>
    <script src="https://unpkg.com/bootstrap-table@1.21.0/dist/extensions/export/bootstrap-table-export.min.js"></script>
    <script src="https://unpkg.com/bootstrap-table@1.21.0/dist/extensions/filter-control/bootstrap-table-filter-control.min.js"></script>*@


@section cssHead{
    <style type="text/css">
        .has-error .select2-selection {
            border-color: #dc3545 !important;
        }

        .card

        .card .card-header {
            text-align: center;
            color: white;
            font-weight: bold;
            font-size: medium;
            box-shadow: inset;
        }
    </style>
}



<div class="row">

    <div class="col-12">
        @*<nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">Library</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Data</li>
                </ol>
            </nav>*@
        <div class="card shadow-sm  mb-5 bg-white rounded">

            <div class="card-header bg-danger" style="color:white; font-weight:bold">
                <a href="@Url.Action("ReturnData", "SparepartReturn", new { area = "SCM" })" data-tooltip="Previous Pagge" class="btn btn-sm btn-outline-light mr-2" title="Previous Page">
                    <i class="fa fa-arrow-left"></i>
                </a>
                Detail Return
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-3 bold"><strong>Return No</strong></div>
                    <div class="col-3"><p>@(ViewBag.header.ReturnNo)</p></div>
                    <div class="col-3 bold"><strong>Return Time</strong></div>
                    <div class="col-3"><p>@(ViewBag.header.Create_Time)</p></div>
                </div>
                <div class="row">
                    <div class="col-3 bold"><strong>Return By</strong></div>
                    <div class="col-3"><p>@(ViewBag.header.UserReturn)</p></div>
                    <div class="col-3 bold"><strong>Status</strong></div>
                    <div class="col-3">
                        <h5>

                            @if (ViewBag.header.Status == 1)
                            {
                                @Html.Raw("<span class=\"badge badge-primary\">Open</span>");

                            }
                            else if (ViewBag.header.Status == 2)
                            {
                                @Html.Raw("<span class=\"badge badge-warning\">Approved</span>");
                            }
                            else if (ViewBag.header.Status == 3)
                            {
                                @Html.Raw("<span class=\"badge badge-secondary\">Received</span>");
                            }
                        </h5>
                    </div>
                </div>  
                <hr />
                <div id="toolbar">
                    @if (ViewBag.header.Status == 2)
                    {
                    <div class="btn-group"><button class="btn btn-secondary" id="ConfirmReceivedReturn" disabled><i class="fa fa-handshake"></i> | Confirm Received</button></div>    
                    }               
                </div>

                <table id="table"
                       data-toggle="table"
                       data-toolbar="#toolbar"
                       data-ajax="ajaxRequest"
                       data-query-params="queryParams"
                       data-click-to-select="true"
                       data-url=""
                       class="table-sm">
                    <thead>
                        <tr>
                            @*<th data-field="state" data-checkbox="true"></th>*@
                            <th data-field="ITEMID" data-sortable="true">ITEM ID</th>
                            <th data-field="ProductName" data-sortable="true">Product Name</th>
                            <th data-field="Quantity" data-sortable="Quantity">Qty Request</th>
                            <th data-field="ItemStatus">Item Status</th>
                            @if (ViewBag.header.Status == 2)
                            {
                                <th data-field="Tools">Action</th>
                            }
                        </tr>
                    </thead>

                </table>
            </div>

        </div>
    </div>
</div>
<div id="EditQuantityModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="@Url.Action("EditQuantityItemOpen", "SparepartReturn", new { area = "SCM" })" id="formUpdateQuantityItemOpen" name="formUpdateQuantityItemOpen">
                <div class="modal-header">
                    <h4 class="modal-title">Edit Item Quantity</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="ITEMID">ITEM ID</label>
                        <input name="ITEMID" type="text" class="form-control" required="required" readonly />
                    </div>
                    <div class="form-group">
                        <label for="">Name</label>
                        <input name="ProductName" type="text" class="form-control" required="required" readonly />
                    </div>
                    <div class="form-group">
                        <label for="txtQty">Quantity</label>
                        <input name="Quantity" id="txtQuantity" type="text" class="form-control" required="required" />
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-default" data-dismiss="modal" value="Cancel" />
                    <input type="Submit" class="btn btn-info" value="Update" id="updateQuantityItemOpen" />
                    <input type="hidden" id="id" name="Id" />
                </div>
            </form>
        </div>
    </div>
</div>
<div id="EditQuantityRealizationModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="@Url.Action("EditQuantityRealization", "SparepartReturn", new { area = "SCM" })" id="formUpdateQuantity" name="formUpdateQuantity">
                <div class="modal-header">
                    <h4 class="modal-title">Edit Item Quantity</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="ITEMID">ITEM ID</label>
                        <input name="ITEMID" type="text" class="form-control" required="required" readonly />
                    </div>
                    <div class="form-group">
                        <label for="">Name</label>
                        <input name="ProductName" type="text" class="form-control" required="required" readonly />
                    </div>
                    <div class="form-group">
                        <label for="txtQty">Quantity</label>
                        <input name="Qty_Realization" id="txtQuantity" type="text" class="form-control" required="required" />
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-default" data-dismiss="modal" value="Cancel" />
                    <input type="Submit" class="btn btn-info" value="Save" id="updateQuantity" />
                    <input type="hidden" id="id" name="Id" />
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    var $process = $('#ConfirmReceivedReturn');

        $process.click(function () {

            var Link = "@Url.Action("ConfirmReceivedReturn", "SparepartReturn", new { area = "SCM" })";
            var id = "@ViewBag.ReturnNo";
            ConfirmSendRequest(Link, "Received Return Request ?", id, '#0275d8', 'Yes, Close');
            //$table.bootstrapTable('remove', {
            //    field: 'id',
            //    values: ids
            //})

        })

    $('#txtScanItem').keydown(function (e) {
        var RequestNo = "@ViewBag.RequestNo";

            if (e.keyCode == 13) {
                $.ajax({
                    type: "post",
                    url: "@Url.Action("PostScanItem", "Sparepart", new { area = "SCM" })",
                    dataType: 'json',
                    data: { "RequestNo": RequestNo, "ITEMID": $(this).val() },
                    success: function (json)
                    {
                        if (json.status == 1) {
                            toastr.options.positionClass = 'toast-bottom-right';
                            toastr.success(json.msg);
                            $('#table').bootstrapTable('refresh', function () {
                                console.log('tes');
                            })
                            $('#txtScanItem').val("");
                        }
                        else {

                            $('.alertMsg').append(json.msg);
                            $('#txtScanItem').val("");
                        }
                    },
                    error: function (er) {
                        console.log(params.error(er))
                        console.log("error", er);
                    }
                })
            }
        })

        function ConfirmSendRequest(Link, Text, id, Button, BtnText) {
            swal({
                title: "Are you sure?",
                text: Text,
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: Button,
                confirmButtonText: BtnText,
                cancelButtonText: "Close",
                closeOnConfirm: false,
                closeOnCancel: false
            }, function (isConfirm) {
                if (isConfirm) {
                    $.ajax({
                        url: Link,
                        type: "POST",
                        cache: false,
                        dataType: "json",
                        data: { returnNo: id },
                        success: function (json) {
                            if (json.status == 1) {
                                swal({
                                    title: "Success",
                                    text: json.msg,
                                    type: "success"
                                }, function () {
                                    location.reload();
                                });

                            } else {
                                swal("Failed!", json.msg, "error");
                            }
                        },
                        error: function () {
                            swal("Canceled!", Link, "error");
                        }

                    })
                } else {
                    swal("Cancelled", "Request Not Send", "error");
                }
            });
        }

        function queryParams(params) {
            params.switch = "@(ViewBag.ReturnNo)";//   <<<----------catch like this
            return params;
        }

        function ajaxRequest(params) {
            var ReturnNo = "@(ViewBag.ReturnNo)";
            $.ajax({
                type: "post",
                url: "@Url.Action("ItemListRequest", "SparepartReturn", new { area = "SCM" })",
                dataType: 'json',
                data: { "ReturnNo": params.data.switch, "Status":'@ViewBag.header.Status' },
                success: function (items) {
                    //console.log(items.notReady);
                    if (items.openConfirm === 0) {

                        $('#ConfirmReceivedReturn').removeClass("btn btn-secondary").addClass("btn btn-primary").prop('disabled', false);
                    } else {
                        $('#ConfirmReceivedReturn').removeClass("btn btn-primary").addClass("btn btn-secondary").prop('disabled', true);
                    }
                    params.success({
                        rows: items
                    }, null);
                },
                error: function (er) {
                    console.log(params.error(er))
                    console.log("error", er);
                }
            })
        }

        $(function () {
            $('#table').bootstrapTable({
                exportDataType: "all",
                exportTypes: ['excel', 'pdf'],
                buttonsClass: 'primary'
            })
        });

        $(document).on('click', '#acceptItem', function (e) {
            var a = $(this).data("id");
            var urlString = "@Url.Action("acceptItem", "SparepartReturn", new { area = "SCM" })";
            //$(this).hide();
                $.ajax({
                    url: urlString,
                    type: "POST",
                    cache: false,
                    data: { Id: a },
                    dataType: 'json',
                    success: function (json) {
                        if (json.status == 1) {
                            toastr.options.positionClass = 'toast-bottom-left';
                            toastr.success(json.msg);
                            $('#table').bootstrapTable('refresh', function () {
                                console.log('tes');
                            })
                        }
                        else {

                            toastr.error(json.msg);
                        }
                    }
                });
        });
        $(document).on('click', '#rejectItem', function (e) {
            var a = $(this).data("id");
            var urlString = "@Url.Action("RejectItem", "SparepartReturn", new { area = "SCM" })";
            //$(this).hide();
                $.ajax({
                    url: urlString,
                    type: "POST",
                    cache: false,
                    data: { Id: a },
                    dataType: 'json',
                    success: function (json) {
                        if (json.status == 1) {
                            toastr.options.positionClass = 'toast-bottom-left';
                            toastr.success(json.msg);
                            $('#table').bootstrapTable('refresh', function () {
                                console.log('tes');
                            })
                        }
                        else {

                            toastr.error(json.msg);
                        }
                    }
                });
        });
        $(document).on('click', '#btnUndo', function (e) {
            var a = $(this).data("id");
            var urlString = "@Url.Action("UndoActionItem", "SparepartReturn", new { area = "SCM" })";
            //$(this).hide();
                $.ajax({
                    url: urlString,
                    type: "POST",
                    cache: false,
                    data: { Id: a },
                    dataType: 'json',
                    success: function (json) {
                        if (json.status == 1) {
                            toastr.options.positionClass = 'toast-bottom-left';
                            toastr.success(json.msg);
                            $('#table').bootstrapTable('refresh', function () {
                                console.log('tes');
                            })
                        }
                        else {

                            toastr.error(json.msg);
                        }
                    }
                });
        });

    var formValidate =
        $("form[name='formUpdateQuantity']").validate({
            // Specify validation rules
            rules: {
                // The key name on the left side is the name attribute
                // of an input field. Validation rules are defined
                // on the right side
                Qty_Realization: {
                    required: true,
                    min: 0
                }
            },
            // Specify validation error messages
            messages: {
                Qty_Realization: {
                    required: "Please enter quantity",
                    min: "please enter minimal 1 quantity"
                }
            },
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                element.closest('.form-group').append(error);
            },
            highlight: function (element, errorClass, validClass) {


                var elem = $(element);
                if (elem.hasClass("select2-offscreen")) {
                    $("#s2id_" + elem.attr("id") + " ul").addClass(errorClass);
                } else {
                    $(element).addClass('is-invalid');
                }
                jQuery(element).closest('.form-group').addClass('has-error');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid');
                jQuery(element).closest('.form-group').removeClass('has-error');
            },
            // Make sure the form is submitted to the destination defined
            // in the "action" attribute of the form when valid
            submitHandler: function (form) {
                updateQuantity();
            }
        });

        $('#updateQuantity').click(function (e) {
            //e.preventDefault();
            formValidate.form();
        });

        $(document).on('click', '#editQty', function (e) {

            var urlString = "@Url.Action("EditQuantityRealization", "SparepartReturn", new { area = "SCM" })";
            var a = $(this).data("id");
            console.log(urlString, a);
            $.ajax({
                type: 'GET',
                url: urlString,
                data: { DetailId: a },
                success: function (response) {

                    var selStock = response[0].Quantity;
                    $('#EditQuantityRealizationModal input[name="Qty_Realization"]').rules('add', {
                        max: selStock,
                        messages: {
                            max: "You Can Only Reduce Quantity"
                        }
                    });
                    $('#EditQuantityRealizationModal input[name="ITEMID"]').val(response[0].ITEMID);
                    $('#EditQuantityRealizationModal input[name="ProductName"]').val(response[0].ProductName);
                    $('#EditQuantityRealizationModal input[name="Qty_Realization"]').val(response[0].Qty_Realization);
                    $('#EditQuantityRealizationModal input[name="Id"]').val(response[0].Id);
                }
            })

        });

        var formValidateOpen =
            $("form[name='formUpdateQuantityItemOpen']").validate({
                // Specify validation rules
                rules: {
                    // The key name on the left side is the name attribute
                    // of an input field. Validation rules are defined
                    // on the right side
                    Quantity: {
                        required: true,
                        min: 0
                    }
                },
                // Specify validation error messages
                messages: {
                    Quantity: {
                        required: "Please enter quantity",
                        min: "please enter minimal 1 quantity"
                    }
                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {


                    var elem = $(element);
                    if (elem.hasClass("select2-offscreen")) {
                        $("#s2id_" + elem.attr("id") + " ul").addClass(errorClass);
                    } else {
                        $(element).addClass('is-invalid');
                    }
                    jQuery(element).closest('.form-group').addClass('has-error');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                    jQuery(element).closest('.form-group').removeClass('has-error');
                },
                // Make sure the form is submitted to the destination defined
                // in the "action" attribute of the form when valid
                submitHandler: function (form) {
                    updateQuantityItemOpen();
                }
            });

        $(document).on('click', '#EditQtyItem', function (e) {

            var urlString = "@Url.Action("EditQuantityItemOpen", "Sparepart", new { area = "SCM" })";
            var a = $(this).data("id");
            console.log(urlString, a);
            $.ajax({
                type: 'GET',
                url: urlString,
                data: { DetailId: a },
                success: function (response) {

                    var selStock = response[0].Stock;
                    $('#EditQuantityModal input[name="Quantity"]').rules('add', {
                        max: selStock,
                        messages: {
                            max: "Stock Available " + selStock
                        }
                    });
                    $('#EditQuantityModal input[name="ITEMID"]').val(response[0].ITEMID);
                    $('#EditQuantityModal input[name="ProductName"]').val(response[0].ProductName);
                    $('#EditQuantityModal input[name="Id"]').val(response[0].Id);
                    $('#EditQuantityModal input[name="Quantity"]').val(response[0].Quantity);
                }
            })

        });

        $('#updateQuantityItemOpen').click(function (e) {
            //e.preventDefault();
            formValidateOpen.form();
        });

        function updateQuantity() {
            $.ajax({
                url: $('#formUpdateQuantity').attr('action'),
                type: "POST",
                cache: false,
                data: $('#formUpdateQuantity').serialize(),
                dataType: 'json',
                success: function (json) {
                    if (json.status == 1) {
                        toastr.options.positionClass = 'toast-bottom-left';
                        toastr.success(json.msg);
                        $('#EditQuantityRealizationModal').modal('toggle');
                        $('#table').bootstrapTable('refresh', function () {
                            console.log('refresh');
                        })
                    }
                    else {
                        toastr.options.positionClass = 'toast-bottom-left';
                        toastr.error(json.msg);
                        $('#EditQuantityRealizationModal').modal('toggle');
                    }
                }
            });

        }

        function updateQuantityItemOpen() {
            $.ajax({
                url: $('#formUpdateQuantityItemOpen').attr('action'),
                type: "POST",
                cache: false,
                data: $('#formUpdateQuantityItemOpen').serialize(),
                dataType: 'json',
                success: function (json) {
                    if (json.status == 1) {
                        toastr.options.positionClass = 'toast-bottom-left';
                        toastr.success(json.msg);
                        $('#EditQuantityModal').modal('toggle');
                        $('#table').bootstrapTable('refresh', function () {
                            console.log('refresh');
                        })
                    }
                    else {
                        toastr.options.positionClass = 'toast-bottom-left';
                        toastr.error(json.msg);
                        $('#EditQuantityModal').modal('toggle');
                    }
                }
            });

        }


    function confirmDelete(Link, id) {
        swal({
            title: "Are you sure?",
            text: "Delete This Item !",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            closeOnConfirm: false,
            closeOnCancel: false
        }, function (isConfirm) {
            if (isConfirm) {
                $.ajax({
                    url: Link,
                    type: "POST",
                    cache: false,
                    dataType: 'json',
                    data: { Id: id },
                    success: function (json) {
                        if (json.status == 1) {
                            swal("Deleted!", "Item has been deleted.", "success");
                            $('#table').bootstrapTable('refresh', function () {
                                console.log('refresh');
                            });
                        } else {
                            swal("Deleted!", "Failed To Delete Item.", "error");
                        }
                    },
                    error: function () {
                        swal("Deleted!", Link, "error");
                    }

                })
            } else {
                swal("Cancelled", "Cancel Delete Item", "error");
            }
        });
        }

        $(document).on('click', '#cancelRequest', function (e) {
            var a = $(this).data("id");
            var Link = "@Url.Action("CancelRequest", "Sparepart", new { area = "SCM" })";
            var id = "@ViewBag.RequestNo";
            ConfirmSendRequest(Link, "Cancel this request ?", id, '#DC4C64', 'Yes, Cancel it');
        });

        // CountDown Function

        // Set the date we're counting down to

</script>
